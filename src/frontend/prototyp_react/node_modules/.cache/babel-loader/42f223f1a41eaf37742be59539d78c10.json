{"ast":null,"code":"import _classCallCheck from \"/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/src/index.js\";\n//import react\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom'; //import redux\n\nimport { createStore } from 'redux';\nimport reducer from './reducers';\nimport { updateInput, switchPage, setError, resetForm } from './actions';\nimport { loadState, saveState } from './localStorage'; //import page parts\n\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Login from './components/Login';\nimport './index.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"handleChange\",\n    //user inputs something into an input field\n    value: function handleChange(id, value) {\n      if (this.props.state.formState[id].error) {\n        store.dispatch(setError(id, false));\n      }\n\n      store.dispatch(updateInput(id, value));\n    } //user clicks button to show form/labels\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(page) {\n      var inputs = this.props.state.formState;\n      var submit = true;\n\n      if (this.props.state.page === \"form\") {\n        for (var key in inputs) {\n          var input = inputs[key];\n\n          if (input.value === \"\") {\n            store.dispatch(setError(key, true));\n            submit = false;\n          } else {\n            store.dispatch(setError(key, false));\n          }\n        }\n      }\n\n      if (submit) {\n        store.dispatch(switchPage(page));\n      }\n    } //user wants to reset all input fields\n\n  }, {\n    key: \"handleResetForm\",\n    value: function handleResetForm() {\n      store.dispatch(resetForm());\n    }\n  }, {\n    key: \"handleLogOut\",\n    value: function handleLogOut() {\n      store.dispatch(switchPage('login'));\n    }\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      store.dispatch(switchPage('form'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      if (this.props.state.page === \"login\") {\n        return React.createElement(Login, {\n          login: this.handleLogin,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(Header, {\n          username: this.props.state.user,\n          logout: this.handleLogOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }), React.createElement(\"main\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"Neuen Skill erstellen\"), React.createElement(Form, {\n          inputs: this.props.state.formState,\n          page: this.props.state.page,\n          name: \"test\",\n          onChange: function onChange(id, value) {\n            return _this.handleChange(id, value);\n          },\n          onSubmit: function onSubmit(page) {\n            return _this.handleSubmit(page);\n          },\n          onReset: function onReset() {\n            return _this.handleResetForm();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        })));\n      }\n    }\n  }]);\n\n  return App;\n}(Component); // ========================================\n\n\nvar render = function render() {\n  ReactDOM.render(React.createElement(App, {\n    state: store.getState(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), document.getElementById('root'));\n  console.log(\"State has been changed: \");\n  console.log(store.getState());\n}; // ==============================\n// state management with redux\n\n\nvar persistedState = loadState();\nvar store = createStore(reducer, persistedState);\nstore.subscribe(function () {\n  saveState(store.getState());\n});\nstore.subscribe(render);\nrender();","map":{"version":3,"sources":["/Users/cornell/SWT-Projekt/swt18w1/src/frontend/prototyp_react/src/index.js"],"names":["React","Component","ReactDOM","createStore","reducer","updateInput","switchPage","setError","resetForm","loadState","saveState","Header","Form","Login","App","id","value","props","state","formState","error","store","dispatch","page","inputs","submit","key","input","handleLogin","user","handleLogOut","handleChange","handleSubmit","handleResetForm","render","getState","document","getElementById","console","log","persistedState","subscribe"],"mappings":"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","sourcesContent":["//import react\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\n//import redux\nimport { createStore } from 'redux';\nimport reducer from './reducers';\nimport {updateInput, switchPage, setError, resetForm} from './actions';\nimport { loadState, saveState} from './localStorage';\n\n//import page parts\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Login from './components/Login';\n\nimport './index.css';\n\n\nclass App extends Component {\n\n    //user inputs something into an input field\n    handleChange(id, value){\n        if (this.props.state.formState[id].error){\n            store.dispatch(setError(id, false))\n        }\n        store.dispatch(updateInput(id, value));\n    }\n\n    //user clicks button to show form/labels\n    handleSubmit(page){\n        const inputs = this.props.state.formState;\n        var submit = true;\n        if (this.props.state.page === \"form\"){\n            for (var key in inputs){\n                var input = inputs[key];\n                if (input.value === \"\"){\n                    store.dispatch(setError(key, true));\n                    submit = false;\n                }else {\n                    store.dispatch(setError(key, false));\n                }\n            }\n        }\n        if (submit){\n            store.dispatch(switchPage(page));\n        }\n    }\n\n    //user wants to reset all input fields\n    handleResetForm(){\n        store.dispatch(resetForm());\n    }\n\n    handleLogOut(){\n        store.dispatch(switchPage('login'));\n    }\n\n    handleLogin(){\n        store.dispatch(switchPage('form'));\n    }\n\n  render() {\n      if (this.props.state.page === \"login\"){\n        return (\n            <Login login={this.handleLogin}/>\n        )\n      }else{\n        return (\n            <div>\n                <Header username={this.props.state.user} logout={this.handleLogOut} />\n                <main>\n                    <h1>Neuen Skill erstellen</h1>\n                    <Form inputs={this.props.state.formState} page={this.props.state.page} name=\"test\" onChange={(id, value) => this.handleChange(id, value)} onSubmit={(page) => this.handleSubmit(page)} onReset={() => this.handleResetForm()}/>\n                </main>\n            </div>\n        );\n      }\n  }\n}\n\n  // ========================================\n  \n  const render = () => {\n    ReactDOM.render(\n        <App state={store.getState()}/>,\n        document.getElementById('root')\n      );\n    console.log(\"State has been changed: \")\n    console.log(store.getState());\n  }\n\n\n// ==============================\n// state management with redux\nconst persistedState = loadState();\n\n\nconst store = createStore(\n    reducer,\n    persistedState\n);\n\n\nstore.subscribe(\n    () => \n    {\n        saveState(store.getState());\n    }\n);\nstore.subscribe(render);\n\nrender();\n"]},"metadata":{},"sourceType":"module"}