{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["json","label","data","x","y","color","datasets","pointBorderColor","borderColor","pointHoverBackgroundColor","pointHoverBorderColor","backgroundColor","fill","pointBorderWidth","Chart","react_default","a","createElement","className","es","width","height","options","scales","xAxes","type","position","time","displayFormats","month","tooltipFormat","unit","yAxes","display","ticks","beginAtZero","steps","stepValue","max","pan","enabled","mode","zoom","startAtZero","maintainAspectRatio","React","Component","App","src_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAMIA,UAAO,CAACC,MAAQ,SAERC,KAAO,CACH,CACAC,EAAG,iBACHC,EAAG,GAGH,CACAD,EAAG,kBACHC,EAAG,GACL,CACED,EAAG,eACHC,EAAG,GACL,CACED,EAAG,oBACHC,EAAG,IAGPC,MAAQ,uBAKVH,EAAO,CAEbI,SAAU,CACR,CACEL,MAAOD,EAAKC,MACZC,KAAMF,EAAKE,KAEXK,iBAAkBP,EAAKK,MACvBG,YAAaR,EAAKK,MAClBI,0BAA2BT,EAAKK,MAChCK,sBAAuBV,EAAKK,MAC5BM,gBAAiBX,EAAKK,MACtBO,MAAM,EACNC,iBAAkB,KAkEXC,mLArDP,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIjB,KAAMA,EACNkB,MAAO,KACPC,OAAQ,IACRC,QAAS,CACLC,OAAQ,CACJC,MAAO,CAAC,CACJC,KAAM,OACNC,SAAU,SACVC,KAAM,CACJC,eAAgB,CAACC,MAAS,SAC1BC,cAAe,WACfC,KAAM,WAGZC,MAAO,CAAC,CACAC,SAAS,EACTC,MAAO,CACHC,aAAa,EACbC,MAAO,GACPC,UAAW,EACXC,IAAK,MAIrBC,IAAI,CACAC,SAAS,EACRC,KAAM,KAETC,KAAM,CACJF,SAAS,EACTC,KAAM,MAGVE,aAAa,EACbC,qBAAqB,aA1CzBC,IAAMC,WC3BXC,mLAnBX,OAEEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,4BAGCF,EAAAC,EAAAC,cAAC+B,EAAD,gBAZOF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8751be45.chunk.js","sourcesContent":["import React, {components} from 'react';\nimport {Bar, Line} from 'react-chartjs-2';\nimport * as zoom from 'chartjs-plugin-zoom'\n\n\n// example for \"Skill\" in json format\nvar json = {\"label\":\"Python\", \n\n            \"data\":[\n                {\n                x: '1. Januar 2015',\n                y: 0\n                \n                },\n                {\n                x: '5. October 2016',\n                y: 1\n            },{\n                x: '5. Juni 2018',\n                y: 4\n            },{\n                x: '23. November 2019',\n                y: 5\n            }],\n\n            \"color\":'rgba(75,192,192,1)'\n        };\n\n        \n\n    const data = {\n    \n    datasets: [\n      {\n        label: json.label,\n        data: json.data,\n\n        pointBorderColor: json.color,\n        borderColor: json.color,        \n        pointHoverBackgroundColor: json.color,\n        pointHoverBorderColor: json.color,\n        backgroundColor: json.color,\n        fill: false,\n        pointBorderWidth: 2,\n        \n    }\n    ]\n    \n  };\n\n \n  \nclass Chart extends React.Component{\n \n    \n    render(){\n        return(\n            \n            <div className = \"Chart\">\n                <Line\n                    data={data}\n                    width={1110}\n                    height={550}\n                    options={{\n                        scales: {\n                            xAxes: [{\n                                type: 'time',\n                                position: 'bottom',\n                                time: {\n                                  displayFormats: {'month': 'MM/YY'},\n                                  tooltipFormat: 'DD/MM/YY',\n                                  unit: 'month',\n                                 }\n                              }],\n                            yAxes: [{\n                                    display: true,\n                                    ticks: {\n                                        beginAtZero: true,\n                                        steps: 0.5,\n                                        stepValue: 1,\n                                        max: 7\n                                    }\n                                }]\n                        },\n                        pan:{\n                            enabled: true,\n                             mode: 'x'\n                        },\n                          zoom: {\n                            enabled: true,\n                            mode: 'xy',\n                            \n                          },\n                        startAtZero: true,\n                        maintainAspectRatio: false,\n\n\t                        }}\n                    />\n            </div>\n            \n        )\n        \n        \n    }\n    \n}\n\n\n\nexport default Chart;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './Chart.js';\n\nclass App extends Component {\n  render() {\n    return (\n      \n      <div className=\"App\">\n        \n        <header className=\"App-header\">\n        <div className=\"headline\">\n          <h1>Skillmatrix Profil</h1>\n          <h3>Max Mustermann</h3>\n          \n            {/* use the Chart component from Chart.js */}\n           <Chart/>\n    \n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}